# -*- coding: utf-8 -*-
"""ALEXNET

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JdkCecLL8WtHINK2LdrFeITCS_gS6QhH
"""

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
from torchvision import datasets, transforms, models
import pickle
import os

# Set device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# === 1. Transform and Load Data ===
transform = transforms.Compose([
    transforms.Resize((227, 227)),
    transforms.ToTensor()
])

train_dataset = datasets.ImageFolder('/content/drive/MyDrive/ecg_classification_master/smoteenn_resize_image_split/training', transform=transform)
val_dataset = datasets.ImageFolder('/content/drive/MyDrive/ecg_classification_master/smoteenn_resize_image_split/validation', transform=transform)
test_dataset = datasets.ImageFolder('/content/drive/MyDrive/ecg_classification_master/smoteenn_resize_image_split/testing', transform=transform)

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

class_names = train_dataset.classes
print("Class names:", class_names)

# === 2. Model Setup ===
model = models.alexnet(pretrained=True)
model.classifier[6] = nn.Linear(4096, len(class_names))  # Adjust output layer to your classes
model = model.to(device)

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.0001)

# === 3. Training Loop with Tracking ===
train_losses = []
train_accuracies = []
val_losses = []
val_accuracies = []

for epoch in range(10):
    model.train()
    running_loss = 0.0
    correct = 0
    total = 0

    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)

        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted = torch.max(outputs, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

    train_loss = running_loss / len(train_loader)
    train_acc = 100 * correct / total
    train_losses.append(train_loss)
    train_accuracies.append(train_acc)

    # === Validation ===
    model.eval()
    val_loss = 0.0
    val_correct = 0
    val_total = 0

    with torch.no_grad():
        for inputs, labels in val_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            val_loss += loss.item()
            _, predicted = torch.max(outputs, 1)
            val_total += labels.size(0)
            val_correct += (predicted == labels).sum().item()

    val_loss /= len(val_loader)
    val_acc = 100 * val_correct / val_total
    val_losses.append(val_loss)
    val_accuracies.append(val_acc)

    print(f"Epoch {epoch+1}: "
          f"Train Loss = {train_loss:.4f}, Train Acc = {train_acc:.2f}%, "
          f"Val Loss = {val_loss:.4f}, Val Acc = {val_acc:.2f}%")

# === 4. Save Trained Model ===
model_save_path = '/content/drive/MyDrive/ecg_classification_master/smoteenn_alexnet_ecg_model.pth'
torch.save(model.state_dict(), model_save_path)
print(f"\nâœ… Model saved to: {model_save_path}")

# === 5. Save Training History ===
history = {
    'train_losses': train_losses,
    'val_losses': val_losses,
    'train_accuracies': train_accuracies,
    'val_accuracies': val_accuracies
}

history_path = '/content/drive/MyDrive/ecg_classification_master/smoteenn_alexnet_training_history.pkl'
with open(history_path, 'wb') as f:
    pickle.dump(history, f)
print(f"ðŸ“Š Training history saved to: {history_path}")